#!/usr/bin/env python3

"""
 Copyright (c) 2024 Cisco Systems, Inc. All rights reserved.
 License at https://github.com/cisco/mercury/blob/master/LICENSE
"""

import sys
import json
import pcap
import signal
import argparse

from mercury import *


class MercuryInterface:

    def __init__(self, interface, pcap_file, output, analyze=False, resources=None, reassembly=False):

        self.output    = output
        self.analyze   = analyze
        self.resources = resources

        packet_filter_cfg_str = b'all'
        if reassembly:
            packet_filter_cfg_str += b';reassembly'

        if self.analyze == True and self.resources != None:
            self.libmerc = Mercury(do_analysis=True, resources=self.resources.encode(), packet_filter_cfg=packet_filter_cfg_str)
        else:
            self.libmerc = Mercury(packet_filter_cfg=packet_filter_cfg_str)
        self.libmerc.mercury_init()

        if self.output != sys.stdout:
            self.out_file_pointer = open(output, 'w', buffering=8192*64)

        if pcap_file != None:
            self.process_pcap(pcap_file)
        elif interface != None:
            self.process_capture(interface)

        if self.out_file_pointer != None:
            self.out_file_pointer.flush()
            if self.out_file_pointer != sys.stdout:
                self.out_file_pointer.close()


    def process_pcap(self, pcap_file):
        p = pcap.pcap(pcap_file)
        p.dispatch(-1, self.process_packet)


    def process_capture(self, iface):
        def signal_handler(signal, frame):
            if self.out_file_pointer != None:
                self.out_file_pointer.flush()
                if self.out_file_pointer != sys.stdout:
                    self.out_file_pointer.close()
            sys.exit(0)
        signal.signal(signal.SIGINT, signal_handler)

        p = pcap.pcap(iface)
        while 1:
            p.dispatch(-1, self.process_packet)
            nrecv, ndrop, nifdrop = p.stats()
            print('nrecv: % 12i, ndrop: % 12i, nifdrop: % 12i' % (nrecv, ndrop, nifdrop))


    def process_packet(self, ts, buf):
        result = self.libmerc.get_mercury_json(buf)
        if result != None and not self.out_file_pointer.closed:
            self.out_file_pointer.write(f'{json.dumps(result)}\n')



def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-c','--capture',action='store',dest='capture_interface',
                      help='live packet capture',default=None)
    parser.add_argument('-r','--read',action='store',dest='pcap_file',
                      help='read packets from file',default=None)
    parser.add_argument('-f','--fingerprint',action='store',dest='output_file',
                      help='write fingerprints to file',default=sys.stdout)
    parser.add_argument('-a','--analysis',action='store_true',dest='analyze',
                      help='perform process identification',default=False)
    parser.add_argument('--resources',action='store',dest='resources',
                      help='use resources file <resources>',default=None)
    parser.add_argument('--reassembly',action='store_true',dest='reassembly',
                      help='turn on reassembly',default=False)
    options = parser.parse_args()

    if (options.pcap_file == None) and (options.capture_interface == None):
        print('error: need a pcap or interface')
        sys.exit(0)

    MercuryInterface(options.capture_interface, options.pcap_file, options.output_file, options.analyze,
                     options.resources, options.reassembly)


if __name__ == '__main__':
    sys.exit(main())
